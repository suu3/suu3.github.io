{"componentChunkName":"component---src-templates-blog-post-js","path":"/회고/[2024-10-05]약_반년_간의_플러터_공부_회고/","result":{"data":{"site":{"siteMetadata":{"title":"Suu.Blog"}},"markdownRemark":{"id":"617bd910-4bdb-5700-8531-28aaed01b735","excerpt":"🔸 시작 동기 플러터를 시작한 건 5월이었다. 평소 최소 스터디 하나는 유지하는데, 마침 하나가 끝나고 새로 참여할 스터디를 찾던 중 플러터 스터디가 눈에 띄었다. 시작하게 된 이유는 크게 세 가지였다. 첫째, 스터디를 통해 주…","html":"<h2 id=\"시작-동기\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EC%9E%91-%EB%8F%99%EA%B8%B0\" aria-label=\"시작 동기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔸 시작 동기</h2>\n<p>플러터를 시작한 건 5월이었다. 평소 최소 스터디 하나는 유지하는데, 마침 하나가 끝나고 새로 참여할 스터디를 찾던 중 플러터 스터디가 눈에 띄었다. 시작하게 된 이유는 크게 세 가지였다.</p>\n<p>첫째, 스터디를 통해 주 1회 학습 리듬을 유지하고 싶었다. 둘째, 앱 개발자와 이야기하다 보면 같은 개발얘기여도 다른 이야기를 하는 듯한 차이가 느껴졌는데 왜 그런 차이가 생기는지 궁금했고 이해하고 싶었다.</p>\n<p>마지막으로, 올해 초에 정했던 2024년의 목표 중 하나가 안 해본 개발 도전 해보기였기 때문에 앱 개발을 해고 싶었다. 그 중에서도 크로스플랫폼 도구를 다뤄보고 싶었고, RN은 예전에 경험해봤을 때 리액트와 거의 비슷했기 때문에 안해본 언어(Dart)를 사용하는 플러터에 도전했다.</p>\n<h2 id=\"공부-과정-및-결과물\" style=\"position:relative;\"><a href=\"#%EA%B3%B5%EB%B6%80-%EA%B3%BC%EC%A0%95-%EB%B0%8F-%EA%B2%B0%EA%B3%BC%EB%AC%BC\" aria-label=\"공부 과정 및 결과물 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔸 공부 과정 및 결과물</h2>\n<h3 id=\"1️⃣강의로-시작하다\" style=\"position:relative;\"><a href=\"#1%EF%B8%8F%E2%83%A3%EA%B0%95%EC%9D%98%EB%A1%9C-%EC%8B%9C%EC%9E%91%ED%95%98%EB%8B%A4\" aria-label=\"1️⃣강의로 시작하다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1️⃣ 강의로 시작하다</h3>\n<p>처음 한 달간은 노마드 코더에서 제공하는 <a href=\"https://nomadcoders.co/dart-for-beginners\"><strong>Dart 강의</strong></a>와 <a href=\"https://nomadcoders.co/flutter-for-beginners?utm_medium=website&#x26;utm_source=webpage&#x26;utm_campaign=roadmap\"><strong>Flutter 기초 강의</strong></a>를 들었다. 처음 언어를 접하는 입장에서 괜찮은 난이도의 강의였다. 노마드코더는 클론 코딩 방식으로 강의가 진행되기때문에 단기간에 익히기 좋았다.</p>\n<ul>\n<li><strong>Dart 를 접하며 느낀 점</strong>\n<ul>\n<li><strong>Dart의 특징:</strong> 빠르다, 객체 지향 언어, 개발자 경험이 좋다. 크게 이 세 가지 특징이 기억에 남는다.</li>\n<li><strong>클래스 기반 객체 지향 언어:</strong> 웹프론트를 하면서 개인 취향에 따라 클래스를 안쓰거나 필요할 때만 쓰거나 다양한 경우를 봤는데, Dart는 모든게 클래스로 되어있었다.</li>\n<li><strong>새로 접하는 문법:</strong> <code class=\"language-text\">Qq operator</code>가 <code class=\"language-text\">??</code>같이 쓰면 자바스크립트의 널 병합 연산자 같으면서도 <code class=\"language-text\">??=</code>같이 단축으로 할당할 수도 있어서 기억에 남았고, <code class=\"language-text\">named constructor</code>로 생성자를 한 줄로 단축해서 쓸 수 있는 점 등 새롭게 느껴지는 문법이 있었다.</li>\n</ul>\n</li>\n<li><strong>Flutter를 접하며 느낀 점</strong>\n<ul>\n<li><strong>위젯 중심 개발:</strong> 모든 UI가 위젯으로 구성되고, 위젯은 리액트의 컴포넌트와 같은 개념처럼 느껴졌다. 리액트에서 컴포넌트 트리 구조로 되어있는것처럼 플러터는 위젯 트리 구조로 되어있었고, 위젯에도 상태를 갖고 있는가에 따라 Stateful과 Stateless위젯으로 나뉘어졌다.</li>\n<li><strong>좋은 개발자 경험:</strong> 린트에 프리티어 등 추가 설정이 필요한 웹과 다르게, Flutter(with dart)는 알아서 린트, 코드 포맷팅, 코드 실행, 디버깅, <code class=\"language-text\">flutter doctor</code>로 필요한 설치 안내 등… 까지 다 해주는게 편했다.</li>\n<li><strong>쉬운 애니메이션 구현:</strong> Hero 위젯을 사용해서 쉽게 페이지 전환 애니메이션을 구현할 수 있었다. (웹의 View Transition과 비슷하게 느껴졌다)</li>\n<li><strong>그 외:</strong> SharedPreferences가 기억에 남는다. 웹의 로컬스토리지와 비슷하단 생각이 들었는데, 나중에 웹배포를 해보니 진자 sharedpreferences를 쓰는 부분에서 로컬 스토리지에 저장이 되었다. (아마 앱으로 빌드 할 시엔 로컬 스토리지와 비슷한 역할을 하는 저장소에 저장할 것 같다.)</li>\n</ul>\n</li>\n</ul>\n<p>그 외 불편했던 점은 개인적으로는 클래스가 익숙하지 않은 점, stateless한 위젯을 빼는 것(하다보니 대부분의 위젯들이 stateful해져서) 등이 어려웠다.</p>\n<h3 id=\"2️⃣기타-주제별-탐구\" style=\"position:relative;\"><a href=\"#2%EF%B8%8F%E2%83%A3%EA%B8%B0%ED%83%80-%EC%A3%BC%EC%A0%9C%EB%B3%84-%ED%83%90%EA%B5%AC\" aria-label=\"2️⃣기타 주제별 탐구 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2️⃣ 기타 주제별 탐구</h3>\n<p>강의를 듣는 것 외에도 스터디에서 여러 주제를 다뤘다.</p>\n<ul>\n<li><strong>Dart 역사</strong>\n<ul>\n<li>2011년에 컨퍼런스에서 첫 공개되었으며 처음엔 Javascript를 대체하기 위핸 웹 개발 언어를 목표로 했다는 점이 흥미로웠다.</li>\n<li>2013년 1.0이 나왔으며 dart2js이 소개됐고 vm의 속도가 js를 넘어섰다.</li>\n<li>2018년 2.0이 나왔으며 dart2native(dart → native 코드 컴파일)가 소개됐다.</li>\n<li>2023년 3.0 웹 어셈블리 지원 등 신 기능이 포함됐다.</li>\n<li>찾아보다가 sass 컴파일러도 node에서 dart로 재작성했다는 점이 눈에 띄었는데, sass를 썼을 때 node-sass 쓰다가 버전 업 하면서 dart-sass 로 바뀌었던 것이 문득 생각났다.</li>\n</ul>\n</li>\n<li><strong>Flutter 아키텍처</strong>\n<ul>\n<li>크게 Dart로 된 Framework 부분, C/C++로 된 엔진 부분, 플랫폼(ios, android..) 특화되어 프레임워크와 플랫폼을 연결하는 역할을 하는 임베더 이렇게 세 가지로 구성된다.</li>\n<li>렌더링 엔진으로 스키아와 임펠라 엔진에 대해 배웠다. 원래는 C++ 2D 그래픽 라이브러리인 스키아 엔진을 썼는데, Shader Jank라고하는 끊김 현상이 생겨, 작은 셰이더 단위가 런타임 전에 컴파일 되어 해당 문제가 방지되는 임펠러 엔진으로 바뀌고 있다고 한다.</li>\n</ul>\n</li>\n<li><strong>플러터의 애니메이션</strong>\n<ul>\n<li>당시 리액트 애니메이션 스터디와 같이 진행하고 있었기 때문에 플러터에서 구현할 수 있는 플러터 애니메이션에 대해서도 궁금증이 생겨 찾아봤다.</li>\n<li>크게 암묵적 애니메이션과 명시적 애니메이션으로 나뉘어졌다.\n<ul>\n<li><strong>암묵적 애니메이션</strong>: 특정 속성 변화 시에 애니메이션이 적용되길 원한다면 사용 (css의 transition과 유사하게 느껴졌다.)</li>\n<li><strong>명시적 애니메이션</strong>: 트리거가 있거나 더 세밀한 제어가 필요할 때 사용 쓴다.(css의 keyframe과 유사하게 느껴졌다.)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>상태 관리</strong>\n<ul>\n<li>플러터의 많은 상태관리 패키지들을 비교하는 시간을 가졌다. 각각 패키지들이 다음과 같이 기억에 남았다.\n<ul>\n<li>Provider: 가장 기본적인 패키지이며 React의 <code class=\"language-text\">Context API</code>와 유사하게 느껴졌다.</li>\n<li>Riverpod: Provider와 비슷하며 쉽고 자유도가 높으면서 신흥강자같은 느낌.</li>\n<li>Bloc: 어렵지만 로직 분리를 용이하게 하여 안정성 있는 상태 관리를 가능하게 해준다.</li>\n<li>GetX: 상태관리 뿐만 아니라 라우팅, 국제화 등 많~은 기능을 종합 제공한다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3️⃣혼자서-투두앱-만들기\" style=\"position:relative;\"><a href=\"#3%EF%B8%8F%E2%83%A3%ED%98%BC%EC%9E%90%EC%84%9C-%ED%88%AC%EB%91%90%EC%95%B1-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"3️⃣혼자서 투두앱 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3️⃣ 혼자서 투두앱 만들기</h3>\n<p><a href=\"https://suu3.github.io/flutter-riverpod-demo/\"><strong>→웹 배포 링크</strong></a></p>\n<p>연습을 위해 go router + riverpod + Supabase(로그인만)를 사용해 간단한 투두앱을 만들었다.</p>\n<ul>\n<li><strong>supabase를 사용한 로그인 구현</strong>\n<ul>\n<li>supabase는 무료 플랜을 제공하면서도 백엔드 없이도 서버 기능을 쉽게 구현할 수 있게 해주기 때문에 supabase를 사용하여 이메일 기반 간단한 로그인을 구현했다.</li>\n<li><strong>대신 무료 플랜일 때 일정 기간 안 쓰면 잠기기 때문에 현재 supabase 관련 부분은 주석처리해놨다.</strong></li>\n</ul>\n</li>\n<li><strong>라우팅 처리</strong>\n<ul>\n<li>go_router 패키지를 사용했다.</li>\n<li>라우트를 상수로 관리하고, 로그인 상태에 따라 페이지를 리다이렉트 시켰다. (하지만 앱으로만 빌드한다면 리다이렉트 로직이 불필요하지않을까 생각이 들었다.)</li>\n</ul>\n</li>\n<li><strong>상태 관리</strong>\n<ul>\n<li>riverpod으로 투두 상태를 관리하는 task provider를 만들었다.</li>\n</ul>\n</li>\n<li><strong>웹 배포</strong>\n<ul>\n<li>아카이빙 목적으로 배포하는 걸 좋아하기 때문에, github action ci/cd 설정해서 github pages에 배포했다.</li>\n<li>웹 배포 방법을 찾아보면서 웹 배포를 하면서 웹 배포의 단점에 대한 글을 보게 되었다. (seo 설정을 위해 플러그인 필요, 로딩 속도, 폰트 깨짐현상, 등) 폰트 깨짐 현상은 배포한 사이트에서도 존재해서 단점을 몸소 느끼게 되었다.</li>\n</ul>\n</li>\n<li><strong>기타 이슈</strong>\n<ul>\n<li>시뮬레이터에서 바텀시트 인풋 필드가 포커싱됐을 때 키보드 높이에 따라 시트가 위로 밀리지 않는 이슈를 겪었다. <a href=\"https://stackoverflow.com/questions/53869078/how-to-move-bottomsheet-along-with-keyboard-which-has-textfieldautofocused-is-t\">StackOverflow 내용</a>에 따라 패딩을 추가해서 해결했다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4️⃣새로운-투두앱-프로젝트로-협업\" style=\"position:relative;\"><a href=\"#4%EF%B8%8F%E2%83%A3%EC%83%88%EB%A1%9C%EC%9A%B4-%ED%88%AC%EB%91%90%EC%95%B1-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EB%A1%9C-%ED%98%91%EC%97%85\" aria-label=\"4️⃣새로운 투두앱 프로젝트로 협업 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4️⃣ 새로운 투두앱 프로젝트로 협업</h3>\n<p>마지막으로 스터디 멤버 세명이서 go router + supabase + riverpod 를 사용하여 투두 앱을 주제로 협업을 했다.</p>\n<p>내가 맡았던 부분은 인증 관련 로직들(로그인, 회원가입, 비밀번호 찾기, 재설정), 세팅이었다.</p>\n<ul>\n<li><strong>세팅 관련</strong>\n<ul>\n<li>웹처럼 플러터에서도 환경변수 설정을 해줄 수 있었는데, 참고했던 supabase 예제에 따라 supabase initialize 부분의 api key에 dotenv 패키지를 사용했다.</li>\n<li>위 투두앱처럼 go router 리다이렉트 로직을 추가했다.</li>\n</ul>\n</li>\n<li><strong>로그인 관련</strong>\n<ul>\n<li>메일을 보내는 부분에서 API 요청 제한이 있어서 테스트가 힘들었다.\n<ul>\n<li>찾아보니 smtp provider를 사용하면 해당 문제를 해결할 수 있었다. 무료 플랜이 넉넉한 Resend라는 서비스를 이용했다. 도메인 등록이 필요한데, 마침 갖고 있는 도메인을 재활용 했다.</li>\n</ul>\n</li>\n<li>supabase 내에서 이메일 템플릿 설정할 수 있었다.</li>\n<li>첨엔 각 페이지마다 supabase api 호출 함수를 모아놓은 클래스 인스턴스를 생성하게 했었는데, 하나의 인스턴스를 공유하게 하는게 더 낫다는 조언을 듣고 riverpod으로 공유하게 바꿨다.</li>\n</ul>\n</li>\n<li><strong>스낵바</strong>\n<ul>\n<li>각 api 성공 여부에 따라 토스트를 띄웠다. api 함수와 스낵바 띄우는 로직을 같이 포함하는게 맞을지에 대한 고민이 있었는데, 스낵바도 ui니까 페이지 안으로 포함시켰다.</li>\n</ul>\n</li>\n<li><strong>딥링크</strong>\n<ul>\n<li>이메일을 받고 되돌아가는 과정에 있어서 웹일 땐 콜백 주소 추가해서 성공 했는데 모바일 시뮬레이터에서 되돌아가는 링크가 어떻게 되는 것인지 이해가 안갔다. (이 과정에서 답답함에 시뮬레이터만 쓰다가 내 핸드폰을 직접 연결해서 테스트 해보기 시작했다.)</li>\n<li>찾아보니 딥링크가 필요했는데, 딥링크에는 모든 플랫폼에서 동작하는 URI 스킴 방식 / 안드로이드의 앱 링크 / ios의 유니버셜 링크 세가지가 있었다. 그 중 URI 스키마를 추가해서 해결했다.\n<ul>\n<li>(참고로 URI 스킴 방식은 동일한 스키마를 사용하는 여러 앱이 설치되어 있으면 앱 선택 창이 뜨는 문제가 있기 때문에 앱 링크와 유니버셜 링크가 그에 대한 해결책이 될 수 있다.)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>이슈</strong>\n<ul>\n<li>앱이 열린 상태에서는 딥링크를 타면 자꾸 원하는 특정 화면이 아닌, 메인 화면으로 이동하는 이슈가 있었다. 이부분은 찾아봐도 답이 안나와서 gpt를 통해 uni_links라는 패키지를 설치하여 앱이 열려있는 상태에서 딥링크가 열렸을 때 특정 화면으로 이동할 수 있도록 로직을 추가하여 해결했다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔸 결론</h2>\n<ul>\n<li>새로 접한 개발 기술이었지만, 웹 프론트 하면서 겪는 고민과 동일한 고민들을 하게 되었다.\n<ul>\n<li>상태 관리를 자유롭게 할건지 엄격하게 할것인지, 위젯은 어떻게 뺄건지, 상수와 함수는 어떻게 관리할 것 인지,폴더구조는 어떻게 가져갈 것인지 고민이 생겼다.</li>\n</ul>\n</li>\n<li>매일 next.js와 웹만 하던 와중에 좋은 환기가 됐다.\n<ul>\n<li>평소에 쓸 일이 적은 시뮬레이터 사용이나, 디버깅같은 경우에도 웹 개발 할땐 브라우저와 데브툴 등 선에서 디버깅 가능하기에 쓸 일이 없었던 vsc breakpoint도 찍고 디버깅할 일이 많았다.</li>\n</ul>\n</li>\n<li>크로스 플랫폼에 대한 생각\n<ul>\n<li>크로스 플랫폼이 네이티브보다 할 수 있는 일이 적다는 점은 어쩔 수 없는 것 같다. 또한 여러 플랫폼을 대응하기 위해 kIsWeb으로 분기 처리해야하는 부분이 있으니 결국 앱과 웹을 각각에 맞는 네이티브로 개발하는 것과 서로 트레이드 오프가 있는 것 같다.</li>\n</ul>\n</li>\n<li>앱에 대해 새로 알아가게 되었다.\n<ul>\n<li>플랫폼과 기기 차이에 따라 대응을 해줘야한다는 점을 느꼈다.</li>\n<li>딥링크라는 새로운 개념을 알게 됐다.</li>\n<li>스타일 객체를 써도 css만큼의 섬세한 조정은 불가능하구나 느꼈다.</li>\n<li>생각해보니 앱에서는 cors같은 걸 신경쓸 필요가 없다는 점이 새삼 부러운 사실이었다.</li>\n</ul>\n</li>\n<li>앞으로는?\n<ul>\n<li>앞으로도 취미 정도로 플러터 개발을 이어갈 것 같다. 웹 공부를 할 일이 생기면 더 우선으로 하면서 여유롭게 플러터를 해보는 걸로.</li>\n</ul>\n</li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EC%8B%9C%EC%9E%91-%EB%8F%99%EA%B8%B0\">🔸 시작 동기</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B3%B5%EB%B6%80-%EA%B3%BC%EC%A0%95-%EB%B0%8F-%EA%B2%B0%EA%B3%BC%EB%AC%BC\">🔸 공부 과정 및 결과물</a></p>\n<ul>\n<li><a href=\"#1%EF%B8%8F%E2%83%A3%EA%B0%95%EC%9D%98%EB%A1%9C-%EC%8B%9C%EC%9E%91%ED%95%98%EB%8B%A4\">1️⃣ 강의로 시작하다</a></li>\n<li><a href=\"#2%EF%B8%8F%E2%83%A3%EA%B8%B0%ED%83%80-%EC%A3%BC%EC%A0%9C%EB%B3%84-%ED%83%90%EA%B5%AC\">2️⃣ 기타 주제별 탐구</a></li>\n<li><a href=\"#3%EF%B8%8F%E2%83%A3%ED%98%BC%EC%9E%90%EC%84%9C-%ED%88%AC%EB%91%90%EC%95%B1-%EB%A7%8C%EB%93%A4%EA%B8%B0\">3️⃣ 혼자서 투두앱 만들기</a></li>\n<li><a href=\"#4%EF%B8%8F%E2%83%A3%EC%83%88%EB%A1%9C%EC%9A%B4-%ED%88%AC%EB%91%90%EC%95%B1-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EB%A1%9C-%ED%98%91%EC%97%85\">4️⃣ 새로운 투두앱 프로젝트로 협업</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EA%B2%B0%EB%A1%A0\">🔸 결론</a></p>\n</li>\n</ul>","frontmatter":{"title":"약 반년 간의 플러터 공부 회고","date":"2024.10.05","description":"프론트 개발자의 플러터 공부 회고","category":"회고","tag":["회고록","Flutter"]}},"previous":{"fields":{"slug":"/기타/[2024-08-18] AWS SAA-C03 취득한 후기/"},"frontmatter":{"title":"AWS SAA-C03 취득한 후기"}},"next":null},"pageContext":{"id":"617bd910-4bdb-5700-8531-28aaed01b735","previousPostId":"0070786c-fc3a-5ba0-af7b-a668b09a6a6d","nextPostId":null}},"staticQueryHashes":["2841359383"],"slicesMap":{}}