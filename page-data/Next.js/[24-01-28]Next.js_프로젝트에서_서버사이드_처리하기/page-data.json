{"componentChunkName":"component---src-templates-blog-post-js","path":"/Next.js/[24-01-28]Next.js_프로젝트에서_서버사이드_처리하기/","result":{"data":{"site":{"siteMetadata":{"title":"Suu.Blog"}},"markdownRemark":{"id":"067b5b7f-8714-53de-9159-4db5fe6ac41b","excerpt":"React.js 프로젝트를 Next.js 프로젝트로 마이그레이션 할 일이 있었고,\n마이그레이션과 함께 다시 프로젝트를 재구성하면서 Next.js의 장점을 살려보고자 클라이언트에서 처리하던 것들을 서버단으로 옮겼던 경험을 적어보고자 한다. 1. Router Guard…","html":"<p>React.js 프로젝트를 Next.js 프로젝트로 마이그레이션 할 일이 있었고,\n마이그레이션과 함께 다시 프로젝트를 재구성하면서 Next.js의 장점을 살려보고자 클라이언트에서 처리하던 것들을 서버단으로 옮겼던 경험을 적어보고자 한다.</p>\n<h2 id=\"1-router-guard-처리하기\" style=\"position:relative;\"><a href=\"#1-router-guard-%EC%B2%98%EB%A6%AC%ED%95%98%EA%B8%B0\" aria-label=\"1 router guard 처리하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Router Guard 처리하기</h2>\n<p>특정 사용자만이 접근할 수 있는 페이지(Vue의 Navigation Guards를 생각하면서 나는 이걸 Guard라고 부른다.)를 만들 때 세 가지 방법이 있다.</p>\n<ol>\n<li>클라이언트에서 처리하기</li>\n<li>middleware</li>\n<li>getInitialProps / getServerSideProps</li>\n</ol>\n<p>해당 프로젝트의 경우 단순 로그인/비로그인이 아닌 유저 정보에 따라 4번의 분기처리가 있고, 각각 도달해야하는 페이지가 달라서 리디렉션 처리를 해야하는 비즈니스 로직이 복잡했다.</p>\n<p>원래 되어있던 상태가 1번이었지만, 페이지가 보여진 다음 리디렉션 처리가 되어야 한다는 점과 그때문에 사용자 입장에서 느리게 느껴진다는 점 때문에 2, 3 중에 하나로 처리할 생각을 했다.</p>\n<p>2번의 경우 루트에 있는 middleware.ts에서 모든 리디렉션 분기를 다 처리해야하는데, 모든 페이지가 해당 파일을 공유하고 있다는 점(페이지마다 처리를 다르게 하기 위해선 if-else가 늘어날 수밖에 없다는 점), 그리고 이미 middleware에서 다른 로직을 처리하고 있었는데 비즈니스 로직이 섞이는 게 보기 좋지 않다는 점에서 제외했다.</p>\n<p>3번의 경우 페이지마다 getInitialProps나 getServerSideProps는 하나만 만들 수 있는데, 이미 next-i18n(지역화) 설정 때문에 getServerSideProps를 사용할수밖에 없는 것도 있었고, 추후 react-query의 SSR을 적용하게 될 경우를 생각해서 getServerSideProps를 선택하게 됐다.</p>\n<p>이 과정에서 엄청나게 많은 아티클을 찾아봤었는데 가장 도움이 됐던건 이 논의 였던 것 같다. (<a href=\"https://github.com/vercel/next.js/discussions/10925\">https://github.com/vercel/next.js/discussions/10925</a>)</p>\n<h3 id=\"getserversideprops에서-guard처리하기\" style=\"position:relative;\"><a href=\"#getserversideprops%EC%97%90%EC%84%9C-guard%EC%B2%98%EB%A6%AC%ED%95%98%EA%B8%B0\" aria-label=\"getserversideprops에서 guard처리하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>getServerSideProps에서 guard처리하기</h3>\n<p>위 discussion을 참고하여 페이지 자체 getServerSideProps에는 영향을 주지않으며, 필요할 때 비즈니스 로직 단계를 추가할 수 있는 withAuthServerSideProps 함수를 만들었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> GetServerSidePropsContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'next'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">...</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">withAuthServerSideProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">getServerSidePropsFunc<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Function</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">context</span><span class=\"token operator\">:</span> GetServerSidePropsContext</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>accessToken <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>refreshToken<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">redirect</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">destination</span><span class=\"token operator\">:</span> <span class=\"token constant\">LOGIN_URL</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 토큰이 없을 때 이동할 url</span>\n        <span class=\"token literal-property property\">statusCode</span><span class=\"token operator\">:</span> <span class=\"token number\">302</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token operator\">...</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>userInfo<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token literal-property property\">redirect</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">destination</span><span class=\"token operator\">:</span> <span class=\"token constant\">ADMIN_URL</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 계정 타입에 따라 이동할 url</span>\n            <span class=\"token literal-property property\">statusCode</span><span class=\"token operator\">:</span> <span class=\"token number\">302</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token operator\">...</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>getServerSidePropsFunc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getServerSidePropsFunc</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> queryClient<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>data<span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token operator\">...</span>data<span class=\"token operator\">?.</span>props<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// page/home.tsx</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Home</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> getServerSideProps <span class=\"token operator\">=</span> <span class=\"token function\">withAuthServerSideProps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//페이지 자체의 getServerSideProps가 필요할 때, 따로 생성하여 argument에 넣어준다.</span></code></pre></div>\n<p>이런 식으로 page의 인증로직을 담당하는 withAuthServerSideProps와, 지역화를 담당하는 withLocalizationServerSideProps 모듈을 만들었다.</p>\n<p>이렇게 함으로써 페이지마다 다른 로직을 적용할 수도 있고 페이지 자신의 getServerSideProps도 쓸 수 있게 되었다.</p>\n<h2 id=\"2-react-queryserversid-prefetching\" style=\"position:relative;\"><a href=\"#2-react-queryserversid-prefetching\" aria-label=\"2 react queryserversid prefetching permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. (React-query)ServerSid Prefetching</h2>\n<p>리디렉션 다음으로 적용했던 것은 서버사이드 프리페칭이었다.</p>\n<p>해당 프로젝트는 다른 프로젝트와 GNB를 공유하고 있었는데, 링크를 이동하면서 로딩이 걸리는 것이 사용자의 사용성을 해친다는 생각이 들었고 ssr 처리를 하기로 했다.</p>\n<p>React-query의 SSR 문서(<a href=\"https://tanstack.com/query/v4/docs/framework/react/guides/ssr\">https://tanstack.com/query/v4/docs/framework/react/guides/ssr</a>)를 보고 세팅했으며, 구성하면서 겪은 이슈에 대해 공유하고자 한다.</p>\n<h3 id=\"서버-사이드에서-쿠키처리하기\" style=\"position:relative;\"><a href=\"#%EC%84%9C%EB%B2%84-%EC%82%AC%EC%9D%B4%EB%93%9C%EC%97%90%EC%84%9C-%EC%BF%A0%ED%82%A4%EC%B2%98%EB%A6%AC%ED%95%98%EA%B8%B0\" aria-label=\"서버 사이드에서 쿠키처리하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>서버 사이드에서 쿠키처리하기</h3>\n<p>대부분의 API 들은 인증 토큰을 같이 보내줘야 하지만, 클라이언트에서는 바로 쿠키를 읽으면 되는 반면 getServerSideProps에서는 context를 통해 http req 헤더를 전달해야 쿠키를 읽을 수 있다는 문제가 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> GetServerSidePropsContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'next'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getCookie <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'cookies-next'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">...</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> getServerSideProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">context</span><span class=\"token operator\">:</span> GetServerSidePropsContext</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> res<span class=\"token punctuation\">,</span> req <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> context<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> accessToken <span class=\"token operator\">=</span> <span class=\"token function\">getCookie</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ACCESS_TOKEN</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> req<span class=\"token punctuation\">,</span> res <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이 문제에 대해 처음에는 클라이언트에서는 axios interceptor를 통해 브라우저에서 쿠키를 읽어 토큰을 넣는 로직이 돌아가고 있었으므로, 서버 단에서는 따로 axios를 생성해서(axios가 두개로 나눠지는 게 불편했지만 추후 리팩토링을 기약하면서) 처리를 했다.</p>\n<p>이렇게 했을 때 처음에는 문제가 없었지만, QueryKey에 쿠키값이 들어가야 하는 경우가 생기면서 문제가 생겼다.</p>\n<p>QueryKey에 쿠키 값이 들어가야하는 경우, 서버에서 초기 HTML을 생성할 때 쿼리 키가 undefined로 뜨면서 미리 생성해 둔 데이터를 가져올 수 없기 때문에 Hydration 불일치 문제가 생겼다.</p>\n<p>그래서 서버 단과 클라이언트 단에서 동일한 axios를 사용할 필요가 생겼고, 같은 고민을 한 사람이 없을까 찾아보다가 해당 이슈를 발견하게 됐다.</p>\n<p><a href=\"https://github.com/axios/axios/issues/4976\">https://github.com/axios/axios/issues/4976</a></p>\n<p>위 이슈를 참고하여 다음과 같이 getServerSideProps를 구성했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> setContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@/libs/context'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> GetServerSidePropsContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'next'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> getServerSideProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">context</span><span class=\"token operator\">:</span> GetServerSidePropsContext</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setContext</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> res<span class=\"token punctuation\">,</span> req <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> context<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> accessToken <span class=\"token operator\">=</span> <span class=\"token function\">getCookie</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ACCESS_TOKEN</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> req<span class=\"token punctuation\">,</span> res <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// @/libs/context.ts</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> GetServerSidePropsContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"next\"</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">let</span> <span class=\"token literal-property property\">context</span><span class=\"token operator\">:</span> GetServerSidePropsContext <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setContext</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">_context</span><span class=\"token operator\">:</span> GetServerSidePropsContext</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  context <span class=\"token operator\">=</span> _context\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">//axios 세팅</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> context <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/libs/context\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getCookie <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"cookies-next\"</span>\n\n<span class=\"token keyword\">const</span> isServer <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> window <span class=\"token operator\">===</span> <span class=\"token string\">\"undefined\"</span>\n\naxios<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> accessToken <span class=\"token operator\">=</span> isServer\n      <span class=\"token operator\">?</span> context<span class=\"token operator\">?.</span>req<span class=\"token operator\">?.</span>cookies<span class=\"token operator\">?.</span>accessToken\n      <span class=\"token operator\">:</span> <span class=\"token function\">getCookie</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ACCESS_TOKEN</span><span class=\"token punctuation\">)</span>\n    config<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>Authorization <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>accessToken<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n\n    <span class=\"token keyword\">return</span> config\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>이렇게 함으로써 서버단과 클라이언트에서 같은 쿠키를 공유하게 되면서 Hydration 문제를 해결하면서도 같은 axios 인스턴스를 재사용 할 수 있게 되었다.</p>\n<h3 id=\"largepagedata\" style=\"position:relative;\"><a href=\"#largepagedata\" aria-label=\"largepagedata permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>largePageData</h3>\n<p>next.js에서는 페이지 데이터가 128kb를 넘으면 성능에 문제 생길 수 있다고 경고를 띄우고 있다. (참고: <a href=\"https://nextjs.org/docs/messages/large-page-data\">https://nextjs.org/docs/messages/large-page-data</a>)</p>\n<p>해당 경고의 경우, next.config.js에서 크기를 늘려 해결할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> nextConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token operator\">...</span>\n  <span class=\"token literal-property property\">experimental</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">largePageDataBytes</span><span class=\"token operator\">:</span> <span class=\"token number\">800</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>디폴트 설정은 명확한 이유가 없으면 지키는게 맞다고 생각한다.</p>\n<p>나또한 해당 경고가 떴지만 성능을 해치면서 SSR을 적용하는건 좋지 않다고 생각해서 일부 적용을 보류했고, 불필요하게 많은 데이터가 오고 있는 api를 재구성해달라고 요청을 드렸다.</p>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=yQ93MyKyCmo\">https://www.youtube.com/watch?v=yQ93MyKyCmo</a></li>\n<li><a href=\"https://github.com/vercel/next.js/discussions/10925\">https://github.com/vercel/next.js/discussions/10925</a></li>\n<li><a href=\"https://github.com/axios/axios/issues/4976\">https://github.com/axios/axios/issues/4976</a></li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#1-router-guard-%EC%B2%98%EB%A6%AC%ED%95%98%EA%B8%B0\">1. Router Guard 처리하기</a></p>\n<ul>\n<li><a href=\"#getserversideprops%EC%97%90%EC%84%9C-guard%EC%B2%98%EB%A6%AC%ED%95%98%EA%B8%B0\">getServerSideProps에서 guard처리하기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#2-react-queryserversid-prefetching\">2. (React-query)ServerSid Prefetching</a></p>\n<ul>\n<li><a href=\"#%EC%84%9C%EB%B2%84-%EC%82%AC%EC%9D%B4%EB%93%9C%EC%97%90%EC%84%9C-%EC%BF%A0%ED%82%A4%EC%B2%98%EB%A6%AC%ED%95%98%EA%B8%B0\">서버 사이드에서 쿠키처리하기</a></li>\n<li><a href=\"#largepagedata\">largePageData</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#reference\">Reference</a></p>\n</li>\n</ul>","frontmatter":{"title":"Next.js 프로젝트에서 서버사이드 처리하기 (리디렉션, 데이터 프리페칭)","date":"2024.01.28","description":"Next.js 프로젝트에서 리디렉션 & tanstack-query 데이터 프리페칭을 서버사이드에서 처리한 경험을 공유한다.","category":"Next.js","tag":["ssr","next.js"]}},"previous":{"fields":{"slug":"/회고/[2024-01-10]2023년_회고록/[2024-01-10]2023년_회고록/"},"frontmatter":{"title":"2023년 회고록"}},"next":null},"pageContext":{"id":"067b5b7f-8714-53de-9159-4db5fe6ac41b","previousPostId":"506731db-188d-5fd0-b691-2be73ee3cb4e","nextPostId":null}},"staticQueryHashes":["2841359383"],"slicesMap":{}}